{
  "name": "iopipe",
  "private": false,
  "version": "0.0.5",
  "description": "iopipe sdk",
  "author": {
    "name": "Eric Windisch"
  },
  "files": [
    "js"
  ],
  "keywords": [
    "iopipe",
    "flow",
    "waterfall",
    "async",
    "functional"
  ],
  "dependencies": {
    "aws-sdk": "",
    "read-stream": "",
    "request": ""
  },
  "main": "js/iopipe.js",
  "license": "Apache-2.0",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/iopipe/iopipe.git"
  },
  "bugs": {
    "url": "https://github.com/iopipe/iopipe/issues"
  },
  "devDependencies": {
    "jasmine": "",
    "istanbul": ""
  },
  "scripts": {
    "test": "istanbul cover jasmine"
  },
  "readme": "IOpipe\n---------------------------------------\nApache 2.0 licensed.\n\nIOpipe is a toolkit for building and orchestrating event-driven and\nserverless applications. These apps may run *locally* or in the cloud\nvia AWS Lambda, Google Cloud Functions, or Azure Functions.\n\nIOpipe can:\n\n * Chain AWS Lambda Functions and local functions\n * Convert NodeJS functions into serverless functions\n * Perform GET and POST HTTP requests\n * Parallelize data into serverless workers.\n\nWe call our serverless functions \"kernels\".  Kernels take and transform\ninput and communicate over the networking, operating in a fashion to\nUnix pipes. A kernel may receive input or send output to/from\nweb service requests, functions, or local applications.\n\n\n---------------------------------------\nUsage\n---------------------------------------\n\n### NodeJS SDK:\n\nThe NodeJS SDK provides a generic callback chaining mechanism which allows\nmixing HTTP(S) requests/POSTs, function calls, and kernels. Callbacks\nreceive the return of the previous function call or HTTP body.\n\nThe callback variable received by a function is *also* an AWS Lambda-compatible\n\"context\" object. Because of this, you can chain standard callback-based NodeJS\nfunctions, and functions written for AWS Lambda.\n\n```javascript\nvar iopipe = require(\"iopipe\")()\n\n/* Get HTTP data, process it with SomeScript, and POST the results.\n   Note that com.example.SomeScript would be present in .iopipe/filter_cache/ */\niopipe.exec(\"http://localhost/get-request\",\n            \"com.example.SomeScript\",\n            \"http://otherhost.post\")\n\n// Users may chain functions and HTTP requests.\niopipe.exec(function(_, callback) { callback(\"something\") },\n            function(arg, callback) { callback(arg) },\n            \"http://otherhost.post\",\n            your_callback)\n\n// A function may also be returned then executed later.\nvar f = iopipe.define(\"http://fetch\", \"https://post\")\nf()\n\n// A defined function also accepts parameters\nvar echo = require(\"iopipe-echo\")\nvar f = iopipe.define(echo, console.log)\nf(\"hello world\")\n\n/* Create an AWS Lambda function from any NodeJS function /w callback.\n   The callback becomes the equivilent of a done or success call on AWS. */\nexport.handler = iopipe.define(function(event, callback) {\n  console.log(event)\n  callback()\n})\n\n/* Of course, this method chaining also works for creating AWS Lambda code.\n   This example will fetch HTTP data from the URL in the event's 'url' key\n   and return a SHA-256 of the retrieved content. */\nvar crypto = require(\"crypto\")\nexport.handler = iopipe.define(iopipe.property(\"url\"),\n                               iopipe.fetch,\n                               (event, callback) => {\n                                  callback(crypto\n                                           .createHash('sha256')\n                                           .update(event)\n                                           .digest('hex'))\n                               })\n```\n\n### AWS Lambda Client\n\nIOpipe also acts as an AWS Lambda Client where a Lambda function may\nbe specified by its URN and included in the execution chain:\n\n```javascript\nvar iopipe = require(\"iopipe\")()\nvar iopipe_aws = require(\"iopipe\")(\n  exec_driver: 'aws'\n  exec_driver_opts: {\n    region: 'us-west-1',\n    access_key: 'itsasecrettoeverybody',\n    secret_key: 'itsasecrettoeverybody'\n  }\n)\nvar crypto = require(\"crypto\")\n\nexport.handler = iopipe_aws.define(\"urn:somefunction\",\n                                   \"urn:anotherfunction\",\n                                   iopipe.property(\"property-of-result\"),\n                                   iopipe.fetch, # fetch that as a URL\n                                   (event, callback) => {\n                                      callback(JSON.parse(event))\n                                   },\n                                   iopipe.map(\n                                     iopipe_aws.define(\n                                       \"urn:spawn_this_on_aws_for_each_value_in_parallel\"\n                                     )\n                                   ))\n```\n\nFor more information on using the NodeJS SDK, please refer to its documentation:\n***https://github.com/iopipe/iopipe/blob/master/docs/nodejs.md***\n\n---------------------------------------\nKernel functions\n---------------------------------------\n\nRequests and responses are translated using kernels, and\nmay pipe to other kernels, or to/from web service endpoints.\n\nKernels simply receive request or response data and output\ntranslated request or response data.\n\nExample:\n\n```javascript\nmodule.exports = function(input, context) {\n  context.done(\"I'm doing something with input: {0}\".format(input))\n}\n```\n\nFunctions should expect a \"context\" parameter which may be called\ndirectly as a callback, but also offers the methods 'done', 'success',\nand 'fail'. Users needing, for any reason, to create a context manually\nmay call iopipe.create_context(callback).\n\nFor more on writing filters see:\n***https://github.com/iopipe/iopipe/blob/master/docs/kernels.md***\n\n### CLI\n\nA Go-based CLI exists to create and export npm modules, share code,\nand provide runtime of magnetic kernels.\n\nDownload the [latest binary release](https://github.com/iopipe/iopipe/releases) and chmod 755 the file.\n\nBuilding from source? See [Build & Install from source](#build--install-from-source).\n\nAlternatively, download & alias our Docker image:\n\n```bash\n$ docker pull iopipe/iopipe:trunk\n$ docker run --name iopipe-data iopipe/iopipe:trunk\n$ eval $(echo \"alias iopipe='docker run --rm --volumes-from iopipe-data iopipe/iopipe:trunk'\" | tee -a ~/.bashrc)\n$ iopipe --help\n```\n\nOS-specific packages are forthcoming.\n\n### Command-line Examples\n\n```sh\n# Import a kernel and name it com.example.SomeScript\n$ iopipe import --name com.example.SomeScript - <<<'input'\n\n# List kernels\n$ iopipe list\n\n# Fetch response and process it with com.example.SomeScript\n$ iopipe --debug exec http://localhost/some-request com.example.SomeScript\n\n# Fetch response and convert it with SomeScript, sending the result to otherhost\n$ iopipe --debug exec http://localhost/some-request com.example.SomeScript \\\n                      http://otherhost/request\n\n# Fetch response and convert it with SomeScript, send that result to otherhost,\n# & converting the response with the script ResponseScript\n$ iopipe --debug exec http://localhost/some-request com.example.SomeScript \\\n                      http://otherhost/request some.example.ResponseScript\n\n# Export an NPM module:\n$ iopipe export --name my-module-name http://localhost/some-request com.example.SomeScript\n```\n\n---------------------------------------\nBuild & Install from source\n---------------------------------------\n\nWith a functioning golang 1.5 development environment:\n\n```bash\n$ go build\n$ ./iopipe --help\n```\n\nAlternatively use Docker to build & deploy:\n\n```bash\n$ docker build -t iopipe-dev .\n$ docker run --name iopipe-data iopipe-dev\n$ eval $(echo \"alias iopipe='docker run --rm --volumes-from iopipe-data iopipe-dev'\" | tee -a ~/.bashrc)\n$ iopipe --help\n```\n---------------------------------------\nSecurity\n---------------------------------------\n\nKernels are executed in individual virtual machines\nwhenever allowed by the executing environment.\nThe definition of a virtual machine here is lax,\nsuch that it may describe a Javascript VM,\na Linux container, or a hardware-assisted x86\nvirtual machine. Users should exercise caution\nwhen running community created kernels.\n\nIt is a project priority to make fetching, publishing,\nand execution of kernels secure for a\nproduction-ready 1.0.0 release.\n\nModules are fetched and stored using sha256 hashes,\nproviding an advantage over module-hosting mechanisms\nwhich are based simply on a name and version. Future\nversions of IOpipe will likely implement TUF for\nstate-of-the-art software assurance.\n\nContact security@iopipe.com for questions.\n\n---------------------------------------\nLICENSE\n---------------------------------------\n\nApache 2.0\n",
  "readmeFilename": "README.md",
  "gitHead": "5865bd87c6a23e8d2979bcec97705be7eca6be7e",
  "homepage": "https://github.com/iopipe/iopipe#readme",
  "_id": "iopipe@0.0.5",
  "_shasum": "e4e9c43605e4f9cfa8292f0df4e791720feeca55",
  "_from": "iopipe@0.0.5"
}
